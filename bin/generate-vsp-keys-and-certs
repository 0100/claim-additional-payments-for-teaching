#!/bin/bash
set -e

if [ $# -lt 2 ]; then
  echo "Usage: $0 ENVIRONMENT_NAME VERSION_NUMBER"
  exit 1
fi

ENVIRONMENT_NAME=$1
VERSION_NUMBER=$2
EMAIL_ADDRESS="capt-dev@digital.education.gov.uk"

RAILS_ROOT="$(bundle exec rails runner "puts Rails.root")"
CERTS_DIR="${RAILS_ROOT}/tmp/certs/"

case $ENVIRONMENT_NAME in
  "development")
    ENVIRONMENT_SHORT_NAME="Dev"
    AZURE_SUBSCRIPTION_ID="8655985a-2f87-44d7-a541-0be9a8c2779d"
    KEY_VAULT_NAME="s118d01-secrets-kv"
    ;;
  "production")
    ENVIRONMENT_SHORT_NAME="Prod"
    AZURE_SUBSCRIPTION_ID="88bd392f-df19-458b-a100-22b4429060ed"
    KEY_VAULT_NAME="s118p01-secrets-kv"
    ;;
  *)
    echo "Could not find a known environment with the name: $ENVIRONMENT_NAME"
    exit 1
    ;;
esac

function fetch_or_generate_key_and_certificate {
  local FILE_PREFIX=$1
  local COMMON_NAME=$2
  local SUBJECT="/emailAddress=$EMAIL_ADDRESS/C=GB/ST=Greater Manchester/L=Manchester/O=DfE/OU=Teaching Workforce Directorate/CN=$COMMON_NAME"

  if [ -f "${CERTS_DIR}${FILE_PREFIX}.key" ]; then
    rm "${CERTS_DIR}${FILE_PREFIX}.key"
  fi

  echo "Attempting to fetch key..."

  if ! az keyvault secret download \
    --vault-name $KEY_VAULT_NAME \
    --name "${FILE_PREFIX}Key" \
    --file "${CERTS_DIR}${FILE_PREFIX}.key"
  then
    KEY_EXISTED=

    echo "Generating key and certificate..."
    openssl req -x509 -newkey rsa:2048 -days 365 -nodes -sha256 -subj "$SUBJECT" -keyout "${CERTS_DIR}${FILE_PREFIX}-tmp.key" -out "${CERTS_DIR}${FILE_PREFIX}.crt"

    echo "Converting key to PKCS#8 format..."
    openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in "${CERTS_DIR}${FILE_PREFIX}-tmp.key" -out "${CERTS_DIR}${FILE_PREFIX}.key"

    rm "${CERTS_DIR}${FILE_PREFIX}-tmp.key"
  else
    echo "Key found."

    KEY_EXISTED=1
  fi

  if [ -f "${CERTS_DIR}${FILE_PREFIX}.key.base64" ]; then
    rm "${CERTS_DIR}${FILE_PREFIX}.key.base64"
  fi

  echo "Attempting to fetch base64 encoded key..."

  if ! az keyvault secret download \
    --vault-name $KEY_VAULT_NAME \
    --name "${FILE_PREFIX}KeyBase64" \
    --file "${CERTS_DIR}${FILE_PREFIX}.key.base64"
  then
    BASE64_KEY_EXISTED=

    echo "Converting base64 encoded key..."

    sed \
        -e "s|-----BEGIN PRIVATE KEY-----||g" \
        -e "s|-----END PRIVATE KEY-----||g" \
        "${CERTS_DIR}${FILE_PREFIX}.key" \
      | tr -d '\n' \
      > "${CERTS_DIR}${FILE_PREFIX}.key.base64"
  else
    echo "Base64 encoded key found."

    BASE64_KEY_EXISTED=1
  fi
}

function store_key_and_certificate {
  local FILE_PREFIX=$1

  if ! [ "$KEY_EXISTED" ]; then
    az keyvault secret set \
      --vault-name $KEY_VAULT_NAME \
      --name "${FILE_PREFIX}Key" \
      --file "${CERTS_DIR}${FILE_PREFIX}.key"

    az keyvault secret set \
      --vault-name $KEY_VAULT_NAME \
      --name "${FILE_PREFIX}Certificate" \
      --file "${CERTS_DIR}${FILE_PREFIX}.crt"
  fi

  if ! [ "$KEY_EXISTED" ] || ! [ "$BASE64_KEY_EXISTED" ]; then
    az keyvault secret set \
      --vault-name $KEY_VAULT_NAME \
      --name "${FILE_PREFIX}KeyBase64" \
      --file "${CERTS_DIR}${FILE_PREFIX}.key.base64"
  fi
}

function generate_key_and_certificate {
  local TYPE=$1
  local FILE_PREFIX=$2
  local COMMON_NAME=$3

  echo "Fetching or generating $TYPE key and certificate..."
  fetch_or_generate_key_and_certificate "$FILE_PREFIX" "$COMMON_NAME"

  if [ "$KEY_EXISTED" ]; then
    echo "A $TYPE key already existed for $ENVIRONMENT_NAME version $VERSION_NUMBER."
    read -rp "  Hit return to continue with the pre-existing key, or CTRL+C to stop."
  fi

  echo "Storing $TYPE key and certificate in $KEY_VAULT_NAME..."
  store_key_and_certificate "$FILE_PREFIX"

  echo "$TYPE certificate ready for uploading to GOV.UK Verify."
}

if ! az account show > /dev/null; then
  echo "Logging in to Azure..."
  az login
fi

mkdir -p "${CERTS_DIR}"

echo "Setting default Azure subscription to $AZURE_SUBSCRIPTION_ID..."
az account set --subscription "$AZURE_SUBSCRIPTION_ID"

echo "This script will generate both the signing and encryption keys."
read -rp "  Hit return to continue, or CTRL+C to stop."

SIGNING_FILE_PREFIX="TeacherPayments${ENVIRONMENT_SHORT_NAME}VspSamlSigning${VERSION_NUMBER}"
SIGNING_COMMON_NAME="Teacher Payments Service $ENVIRONMENT_SHORT_NAME VSP SAML Signing $VERSION_NUMBER"

ENCRYPTION_FILE_PREFIX="TeacherPayments${ENVIRONMENT_SHORT_NAME}VspSamlEncryption${VERSION_NUMBER}"
ENCRYPTION_COMMON_NAME="Teacher Payments Service $ENVIRONMENT_SHORT_NAME VSP SAML Encryption $VERSION_NUMBER"

echo
generate_key_and_certificate signing "$SIGNING_FILE_PREFIX" "$SIGNING_COMMON_NAME"

echo
generate_key_and_certificate encryption "$ENCRYPTION_FILE_PREFIX" "$ENCRYPTION_COMMON_NAME"

echo
echo "Done! Files are in tmp/certs. Do not forget to remove them when you are done!"
