#!/bin/bash
set -e

if [ $# -lt 2 ]; then
  echo "Usage: $0 ENVIRONMENT_NAME VERSION_NUMBER"
  exit 1
fi

ENVIRONMENT_NAME=$1
VERSION_NUMBER=$2

case $ENVIRONMENT_NAME in
  "development")
    ENVIRONMENT_SHORT_NAME="Dev"
    AZURE_SUBSCRIPTION_ID="8655985a-2f87-44d7-a541-0be9a8c2779d"
    KEY_VAULT_NAME="s118d01-secrets-kv"
    ;;
  "production")
    ENVIRONMENT_SHORT_NAME="Prod"
    AZURE_SUBSCRIPTION_ID="88bd392f-df19-458b-a100-22b4429060ed"
    KEY_VAULT_NAME="s118p01-secrets-kv"
    ;;
  *)
    echo "Could not find an known environment with the name: $ENVIRONMENT_NAME"
    exit 1
    ;;
esac

function check_existing_key {
  local FILE_PREFIX=$1

  echo "Attempting to fetch existing key..."

  if ! az keyvault secret show \
    --vault-name $KEY_VAULT_NAME \
    --name "${FILE_PREFIX}Key" \
    > /dev/null
  then
    KEY_EXISTED=
  else
    echo "Key found."

    KEY_EXISTED=1
  fi
}

function check_existing_cert {
  local FILE_PREFIX=$1

  echo "Attempting to fetch existing certificate..."

  if ! az keyvault secret show \
    --vault-name $KEY_VAULT_NAME \
    --name "${FILE_PREFIX}Certificate" \
    > /dev/null
  then
    CERT_EXISTED=
  else
    echo "Certificate found."

    CERT_EXISTED=1
  fi
}

function store_certificate {
  local FILE_PREFIX=$1
  local CERTIFICATE=$2

  if ! [ "$CERT_EXISTED" ]; then
    az keyvault secret set \
      --vault-name $KEY_VAULT_NAME \
      --name "${FILE_PREFIX}Certificate" \
      --value "$CERTIFICATE"
  fi
}

function import_cert {
  local TYPE=$1
  local FILE_PREFIX=$2

  echo "Checking for matching $TYPE key..."
  check_existing_key "$FILE_PREFIX"

  if ! [ "$KEY_EXISTED" ]; then
    echo "A matching $TYPE key doesn't exist for $ENVIRONMENT_NAME version $VERSION_NUMBER."
    echo "Check you have the correct version number: $VERSION_NUMBER."
    read -rp "  Hit return to continue anyway, or CTRL+C to stop."
  fi

  echo "Importing $TYPE certificate..."
  check_existing_cert "$FILE_PREFIX"

  if [ "$CERT_EXISTED" ]; then
    echo "A $TYPE certificate already existed for $ENVIRONMENT_NAME version $VERSION_NUMBER."
    read -rp "  Hit return to continue, overwriting the existing certificate with a new certificate, or CTRL+C to stop."
  fi

  CERTIFICATE=

  while ! [ "$CERTIFICATE" ]; do
    echo "  Paste the $TYPE certificate body and hit return a couple of times:"
    CERTIFICATE=$(sed '/^$/q')
    echo
  done

  echo "Storing $TYPE certificate in $KEY_VAULT_NAME..."
  store_certificate "$FILE_PREFIX" "$CERTIFICATE"
}

if ! az account show > /dev/null; then
  echo "Logging in to Azure..."
  az login
fi

echo "Setting default Azure subscription to $AZURE_SUBSCRIPTION_ID..."
az account set --subscription "$AZURE_SUBSCRIPTION_ID"

SIGNING_FILE_PREFIX="TeacherPayments${ENVIRONMENT_SHORT_NAME}VspSamlSigning${VERSION_NUMBER}"

ENCRYPTION_FILE_PREFIX="TeacherPayments${ENVIRONMENT_SHORT_NAME}VspSamlEncryption${VERSION_NUMBER}"

echo
import_cert signing "$SIGNING_FILE_PREFIX"

echo
import_cert encryption "$ENCRYPTION_FILE_PREFIX"

echo
echo "Done!"
